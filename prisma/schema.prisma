generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(uuid())
  userName              String                  @db.VarChar()
  userEmail             String                  @unique @db.VarChar()
  userPassword          String                  @db.VarChar(100)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  Pilars                Pilar[]
  Areas                 Area[]
  Activities            Activity[]
  Employees             Employee[]
  Documents             Document[]
  DocumentsOnActivities DocumentsOnActivities[]
}

model Pilar {
  id           String   @id @default(uuid())
  pilarName    String   @unique @db.VarChar()
  pilarManager String   @db.VarChar()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    User     @relation(fields: [userId], references: [id])
  userId       String
  Areas        Area[]
}

model Area {
  id         String     @id @default(uuid())
  areaName   String     @unique @db.VarChar()
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  pilar      Pilar      @relation(fields: [pilarId], references: [id])
  pilarId    String
  createdBy  User       @relation(fields: [userId], references: [id])
  userId     String
  Activities Activity[]
}

model Activity {
  id                    String                  @id @default(uuid())
  activityName          String                  @unique @db.VarChar()
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  area                  Area                    @relation(fields: [areaId], references: [id])
  areaId                String
  createdBy             User                    @relation(fields: [userId], references: [id])
  userId                String
  Employees             Employee[]
  DocumentsOnActivities DocumentsOnActivities[]
}

model Employee {
  id           String     @id @default(uuid())
  employeeCode Int        @unique
  employeeName String     @db.VarChar()
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  activity     Activity   @relation(fields: [activityId], references: [id])
  activityId   String
  createdBy    User       @relation(fields: [userId], references: [id])
  userId       String
  Trainings    Training[]
}

model Document {
  id                    String                  @id @default(uuid())
  documentCode          String                  @unique @db.VarChar()
  documentName          String                  @db.VarChar()
  documentStatus        Boolean                 @default(true)
  documentType          DocumentType
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  createdBy             User                    @relation(fields: [userId], references: [id])
  userId                String
  DocumentsOnActivities DocumentsOnActivities[]
}

model DocumentsOnActivities {
  id         String     @id @default(uuid())
  activity   Activity   @relation(fields: [activityId], references: [id])
  activityId String
  document   Document   @relation(fields: [documentId], references: [id])
  documentId String
  assignedAt DateTime   @default(now())
  createdBy  User       @relation(fields: [userId], references: [id])
  userId     String
  Trainings  Training[]

  @@unique([activityId, documentId])
}

model Training {
  id                      Int                   @id @default(autoincrement())
  employee                Employee              @relation(fields: [employeeId], references: [id])
  employeeId              String
  documentsOnActivities   DocumentsOnActivities @relation(fields: [documentsOnActivitiesId], references: [id])
  documentsOnActivitiesId String
  isCompleted             Boolean               @default(false)
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  taughtBy                Int?

  @@unique([employeeId, documentsOnActivitiesId])
}

enum DocumentType {
  IT
  PROC
}
